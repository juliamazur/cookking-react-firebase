// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <TextField
        data-test="input"
        id={undefined}
        label={undefined}
        margin="normal"
        onChange={undefined}
        placeholder={undefined}
        required={false}
        select={false}
        value={undefined}
        variant="standard"
/>,
      "fullWidth": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "data-test": "input",
        "id": undefined,
        "label": undefined,
        "margin": "normal",
        "onChange": undefined,
        "placeholder": undefined,
        "required": false,
        "select": false,
        "value": undefined,
        "variant": "standard",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <TextField
          data-test="input"
          id={undefined}
          label={undefined}
          margin="normal"
          onChange={undefined}
          placeholder={undefined}
          required={false}
          select={false}
          value={undefined}
          variant="standard"
/>,
        "fullWidth": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data-test": "input",
          "id": undefined,
          "label": undefined,
          "margin": "normal",
          "onChange": undefined,
          "placeholder": undefined,
          "required": false,
          "select": false,
          "value": undefined,
          "variant": "standard",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Input should render correctly with props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    id="test-input"
    name="Test"
    value="test-value"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <TextField
        data-test="input"
        id="test-input"
        label={undefined}
        margin="normal"
        onChange={undefined}
        placeholder={undefined}
        required={false}
        select={false}
        value="test-value"
        variant="standard"
/>,
      "fullWidth": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "data-test": "input",
        "id": "test-input",
        "label": undefined,
        "margin": "normal",
        "onChange": undefined,
        "placeholder": undefined,
        "required": false,
        "select": false,
        "value": "test-value",
        "variant": "standard",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <TextField
          data-test="input"
          id="test-input"
          label={undefined}
          margin="normal"
          onChange={undefined}
          placeholder={undefined}
          required={false}
          select={false}
          value="test-value"
          variant="standard"
/>,
        "fullWidth": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data-test": "input",
          "id": "test-input",
          "label": undefined,
          "margin": "normal",
          "onChange": undefined,
          "placeholder": undefined,
          "required": false,
          "select": false,
          "value": "test-value",
          "variant": "standard",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
